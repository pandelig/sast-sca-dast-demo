name: DAST Scan

on:
  push:
    branches: [ main ] # Runs on pushes to the main branch
  workflow_dispatch: # Allows manual triggering from the Actions tab

jobs:
  dast_checks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Docker Network
        run: docker network create zap-network

      - name: Build Flask Docker image # This step builds the image
        run: docker build -t my-vulnerable-flask-app ./vulnerable_flask_app

      # New step: Run the built container and map a port to the host
      - name: Run Flask Docker container
        run: docker run -d --name flask-app-container -p 5000:5000 --network zap-network my-vulnerable-flask-app

      # Wait for the app to start (sleep is simple, a healthcheck loop is better)
      - name: Wait for app to start
        run: sleep 10 # Adjust if needed

      - name: Run OWASP ZAP Full Scan
        # Use the full scan script, read more about the command and its flags here: https://www.zaproxy.org/docs/docker/full-scan/#usage
        # The target URL 'http://vulnerable_app:5000' should work because GitHub Actions makes the service name resolvable.
        run: |
          docker run -t --network zap-network -v $(pwd):/zap/wrk/:rw ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py -t http://flask-app-container:5000 -I -j -r report.html -J report.json -x report.xml -a    

      # https://github.com/marketplace/actions/upload-a-build-artifact
      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        # This step will run even if the previous ZAP scan step fails
        if: always()
        with:
          name: zap-reports
          path: |
            report.html
            report.json
            report.xml
          retention-days: 5
